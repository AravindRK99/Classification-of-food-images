# -*- coding: utf-8 -*-
"""COLLEGPROJECT_Whole.ipynb

Created on Google Colab by Aravind R Krishnan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FqQpoNU0hjZUfS0cxW2jCHl6rjHiT2PH
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x

import tensorflow as tf 
print(tf.__version__)
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

!pip install -q keras

from google.colab import drive
drive.mount("/content/gdrive")
#drive.mount("/content/gdrive", force_remount=True)

tpath="/content/gdrive/My Drive/Colab Notebooks/Project Dataset/training_set"
vpath="/content/gdrive/My Drive/Colab Notebooks/Project Dataset/test_set"

#Part 1: Building the CNN 
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense#fully connected layer
from keras.layers import Dropout
from keras.optimizers import Adam

classifier = Sequential()
#CONVOLUTION 
classifier.add(Conv2D(64, (3, 3), input_shape=(256,256,3), activation='relu', padding='same'))
classifier.add(MaxPooling2D(pool_size=(2,2)))
classifier.add(Dropout(0.2))

#SECOND CONVOLUTION AND POOLING LAYER
classifier.add(Conv2D(128, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.25))

#Third layer
classifier.add(Conv2D(256, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.25))
#Layer 4
classifier.add(Conv2D(512, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.25))

#Layer5
classifier.add(Conv2D(512, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.3))

"""#Layer 6"""
"""classifier.add(Conv2D(64, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.3))

#Layer 7
classifier.add(Conv2D(64, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.3))
#Layer 8
classifier.add(Conv2D(64, (3, 3), activation = 'relu', padding='same'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Dropout(0.3))"""


#FLATTENING
classifier.add(Flatten())

#FULL CONNECTION
classifier.add(Dense(units=128, activation='relu'))#HIDDEN LAYER
#classifier.add(Dropout(0.3))
classifier.add(Dense(units=5, activation='softmax'))#OUTPUT LAYER

#Compiling the CNN 
classifier.compile(optimizer='adam', loss='categorical_crossentropy', metrics =['accuracy'])
classifier.summary()

#Image preprocessing step to fit the CNN to all the images
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator( rotation_range=30,width_shift_range=0.1,
                                   height_shift_range=0.1,
                                   
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        vertical_flip=True,
        fill_mode='nearest')

test_datagen = ImageDataGenerator(rescale=1./255)


training_set = train_datagen.flow_from_directory(tpath,
                                                 target_size = (256,256),
                                                 batch_size =32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(vpath,
                                            target_size = (256,256),
                                            batch_size =32,
                                            class_mode = 'categorical')
history = classifier.fit_generator(training_set,
                         steps_per_epoch = 4000//32,
                         epochs = 40,
                         validation_data = test_set,
                         validation_steps = 1000//32)

#Accuracy Plot
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("Model Performance")
plt.xlabel("epoch")
plt.ylabel('Accuracy')
plt.legend(['acc', 'val_acc'])
plt.show()
#Loss Plot
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()


# Install the PyDrive wrapper & import libraries.
# This only needs to be done once in a notebook.
!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once in a notebook.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Create & upload a file.
uploaded = drive.CreateFile({'title': 'MINI_PROJECT_MODEL_FINAL.h5'})
uploaded.SetContentFile('MINI_PROJECT_MODEL_FINAL.h5')
uploaded.Upload()
print('Uploaded file with ID {}'.format(uploaded.get('id')))


